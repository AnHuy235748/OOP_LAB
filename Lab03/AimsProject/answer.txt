1. What class should implement the Comparable interface?
The Media class should implement the Comparable interface because it is the base class for all media items like DVDs, books, and CDs. This allows all subclasses to inherit a default comparison behavior that can be used for sorting or ordering operations.

2. In those classes, how should you implement the compareTo() method to reflect the ordering that we want?
In the Media class, the compareTo() method should define a default ordering. A common approach is to compare items first by their title (alphabetically), and if the titles are the same, then by their cost (in ascending order). This ensures a consistent and logical natural order across all media types.

3. Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
No, the Comparable interface only allows for one natural ordering. If you need multiple ways to sort the items (such as by title then cost in one case, and by cost then title in another), you must use additional Comparator implementations. These provide alternative sorting logic without changing the default behavior defined in compareTo().

4. Suppose the DVDs have a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?
To support a different ordering rule for DVDs, you can override the compareTo() method specifically in the DVD class. This allows DVDs to use a custom comparison logic (such as by title, then by decreasing length, then by cost) while other media types continue to use the default ordering defined in the Media class. Alternatively, you can create a separate Comparator for DVDs and use it only when sorting lists of DVDs.